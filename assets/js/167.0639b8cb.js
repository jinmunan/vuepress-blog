(window.webpackJsonp=window.webpackJsonp||[]).push([[167],{498:function(t,a,s){"use strict";s.r(a);var n=s(3),e=Object(n.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"十、gateway网关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#十、gateway网关"}},[t._v("#")]),t._v(" 十、Gateway网关")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.staticaly.com/gh/jinmunan/imgs@master/frame/springcloud/gateway/54b61d819aa1630bc61732de340b55b4.png",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"_1、gateway介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1、gateway介绍"}},[t._v("#")]),t._v(" 1、Gateway介绍")]),t._v(" "),a("p",[t._v("Gateway是在Spring生态系统之上构建的API网关服务，基于Spring 5，Spring Boot 2和Project Reactor等技术。")]),t._v(" "),a("p",[t._v("Gateway旨在提供一种简单而有效的方式来对API进行路由，以及提供一些强大的过滤器功能，例如:熔断、限流、重试等。")]),t._v(" "),a("p",[t._v("SpringCloud Gateway是Spring Cloud的一个全新项目，基于Spring 5.0+Spring Boot 2.0和Project Reactor等技术开发的网关，它旨在为微服务架构提供—种简单有效的统一的API路由管理方式。")]),t._v(" "),a("p",[t._v("SpringCloud Gateway作为Spring Cloud 生态系统中的网关，目标是替代Zuul，在Spring Cloud 2.0以上版本中，没有对新版本的Zul 2.0以上最新高性能版本进行集成，仍然还是使用的Zuul 1.x非Reactor模式的老版本。而为了提升网关的性能，SpringCloud Gateway是基于WebFlux框架实现的，而WebFlux框架底层则使用了高性能的Reactor模式通信框架Netty。")]),t._v(" "),a("p",[t._v("Spring Cloud Gateway的目标提供统一的路由方式且基于 Filter链的方式提供了网关基本的功能，例如:安全，监控指标和限流。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.staticaly.com/gh/jinmunan/imgs@master/frame/springcloud/gateway/5877d4b9035ead9cd2d037609dceb442.png",alt:"img"}})]),t._v(" "),a("h2",{attrs:{id:"_2、gateway非阻塞异步模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2、gateway非阻塞异步模型"}},[t._v("#")]),t._v(" 2、GateWay非阻塞异步模型")]),t._v(" "),a("p",[a("strong",[t._v("SpringCloud Gateway具有如下特性")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("基于Spring Framework 5，Project Reactor和Spring Boot 2.0进行构建；")])]),t._v(" "),a("li",[a("p",[t._v("动态路由：能够匹配任何请求属性；")])]),t._v(" "),a("li",[a("p",[t._v("可以对路由指定Predicate (断言)和Filter(过滤器)；")])]),t._v(" "),a("li",[a("p",[t._v("集成Hystrix的断路器功能；")])]),t._v(" "),a("li",[a("p",[t._v("集成Spring Cloud 服务发现功能；")])]),t._v(" "),a("li",[a("p",[t._v("易于编写的Predicate (断言)和Filter (过滤器)；")])]),t._v(" "),a("li",[a("p",[t._v("请求限流功能；")])]),t._v(" "),a("li",[a("p",[t._v("支持路径重写。")])])]),t._v(" "),a("p",[a("strong",[t._v("SpringCloud Gateway与Zuul的区别")])]),t._v(" "),a("ul",[a("li",[t._v("在SpringCloud Finchley正式版之前，Spring Cloud推荐的网关是Netflix提供的Zuul。")]),t._v(" "),a("li",[t._v("Zuul 1.x，是一个基于阻塞I/O的API Gateway。")]),t._v(" "),a("li",[t._v("Zuul 1.x基于Servlet 2.5使用阻塞架构它不支持任何长连接(如WebSocket)Zuul的设计模式和Nginx较像，每次I/О操作都是从工作线程中选择一个执行，请求线程被阻塞到工作线程完成，但是差别是Nginx用C++实现，Zuul用Java实现，而JVM本身会有第-次加载较慢的情况，使得Zuul的性能相对较差。")]),t._v(" "),a("li",[t._v("Zuul 2.x理念更先进，想基于Netty非阻塞和支持长连接，但SpringCloud目前还没有整合。Zuul .x的性能较Zuul 1.x有较大提升。在性能方面，根据官方提供的基准测试,Spring Cloud Gateway的RPS(每秒请求数)是Zuul的1.6倍。")]),t._v(" "),a("li",[t._v("Spring Cloud Gateway建立在Spring Framework 5、Project Reactor和Spring Boot2之上，使用非阻塞API。")]),t._v(" "),a("li",[t._v("Spring Cloud Gateway还支持WebSocket，并且与Spring紧密集成拥有更好的开发体验")])]),t._v(" "),a("p",[a("strong",[t._v("Zuul1.x模型")])]),t._v(" "),a("p",[t._v("Springcloud中所集成的Zuul版本，采用的是Tomcat容器，使用的是传统的Serviet IO处理模型。")]),t._v(" "),a("p",[t._v("Servlet的生命周期？servlet由servlet container进行生命周期管理。")]),t._v(" "),a("ul",[a("li",[t._v("container启动时构造servlet对象并调用servlet init()进行初始化；")]),t._v(" "),a("li",[t._v("container运行时接受请求，并为每个请求分配一个线程（一般从线程池中获取空闲线程）然后调用service)；")]),t._v(" "),a("li",[t._v("container关闭时调用servlet destory()销毁servlet。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.staticaly.com/gh/jinmunan/imgs@master/frame/springcloud/gateway/b71ecbfb29c939615c988123a0704306.png",alt:"img"}})]),t._v(" "),a("p",[t._v("上述模式的缺点：")]),t._v(" "),a("p",[t._v("Servlet是一个简单的网络IO模型，当请求进入Servlet container时，Servlet container就会为其绑定一个线程，在并发不高的场景下这种模型是适用的。但是一旦高并发(如抽风用Jmeter压)，线程数量就会上涨，而线程资源代价是昂贵的（上线文切换，内存消耗大）严重影响请求的处理时间。在一些简单业务场景下，不希望为每个request分配一个线程，只需要1个或几个线程就能应对极大并发的请求，这种业务场景下servlet模型没有优势。")]),t._v(" "),a("p",[t._v("所以Zuul 1.X是基于servlet之上的一个阻塞式处理模型，即Spring实现了处理所有request请求的一个servlet (DispatcherServlet)并由该servlet阻塞式处理处理。所以SpringCloud Zuul无法摆脱servlet模型的弊端。")]),t._v(" "),a("p",[a("strong",[t._v("Gateway模型")])]),t._v(" "),a("p",[t._v("传统的Web框架，比如说: Struts2，SpringMVC等都是基于Servlet APl与Servlet容器基础之上运行的。")]),t._v(" "),a("p",[t._v("但是在Servlet3.1之后有了异步非阻塞的支持。而WebFlux是一个典型非阻塞异步的框架，它的核心是基于Reactor的相关API实现的。相对于传统的web框架来说，它可以运行在诸如Netty，Undertow及支持Servlet3.1的容器上。非阻塞式+函数式编程(Spring 5必须让你使用Java 8)。")]),t._v(" "),a("p",[t._v("Spring WebFlux是Spring 5.0 引入的新的响应式框架，区别于Spring MVC，它不需要依赖Servlet APl，它是完全异步非阻塞的，并且基于Reactor来实现响应式流规范。")]),t._v(" "),a("h2",{attrs:{id:"_3、gateway工作流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3、gateway工作流程"}},[t._v("#")]),t._v(" 3、Gateway工作流程")]),t._v(" "),a("p",[a("strong",[t._v("三大核心概念")])]),t._v(" "),a("ul",[a("li",[t._v("Route(路由) - 路由是构建网关的基本模块,它由ID,目标URI,一系列的断言和过滤器组成,如断言为true则匹配该路由；")]),t._v(" "),a("li",[t._v("Predicate(断言) - 参考的是Java8的java.util.function.Predicate，开发人员可以匹配HTTP请求中的所有内容(例如请求头或请求参数),如果请求与断言相匹配则进行路由；")]),t._v(" "),a("li",[t._v("Filter(过滤) - 指的是Spring框架中GatewayFilter的实例,使用过滤器,可以在请求被路由前或者之后对请求进行修改。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.staticaly.com/gh/jinmunan/imgs@master/frame/springcloud/gateway/70da1eecc951a338588356ee2db3fa1f.png",alt:"img"}})]),t._v(" "),a("p",[t._v("web请求，通过一些匹配条件，定位到真正的服务节点。并在这个转发过程的前后，进行一些精细化控制。")]),t._v(" "),a("p",[t._v("predicate就是我们的匹配条件；而fliter，就可以理解为一个无所不能的拦截器。有了这两个元素，再加上目标uri，就可以实现一个具体的路由了")]),t._v(" "),a("p",[a("strong",[t._v("Gateway工作流程")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.staticaly.com/gh/jinmunan/imgs@master/frame/springcloud/gateway/62be54501c6e2b95620b79cc918a2e9a.png",alt:"img"}})]),t._v(" "),a("p",[t._v("客户端向Spring Cloud Gateway发出请求。然后在Gateway Handler Mapping 中找到与请求相匹配的路由，将其发送到GatewayWeb Handler。")]),t._v(" "),a("p",[t._v("Handler再通过指定的过滤器链来将请求发送到我们实际的服务执行业务逻辑，然后返回。")]),t._v(" "),a("p",[t._v('过滤器之间用虚线分开是因为过滤器可能会在发送代理请求之前(“pre”)或之后(“post"）执行业务逻辑。')]),t._v(" "),a("p",[t._v("Filter在“pre”类型的过滤器可以做参数校验、权限校验、流量监控、日志输出、协议转换等，在“post”类型的过滤器中可以做响应内容、响应头的修改，日志的输出，流量监控等有着非常重要的作用。")]),t._v(" "),a("p",[t._v("核心逻辑：路由转发 + 执行过滤器链。")]),t._v(" "),a("h2",{attrs:{id:"_4、gateway配置路由的两种方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4、gateway配置路由的两种方式"}},[t._v("#")]),t._v(" 4、Gateway配置路由的两种方式")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("在配置文件yml中配置")])]),t._v(" "),a("li",[t._v("编码配置（了解）")])]),t._v(" "),a("h2",{attrs:{id:"_5、gateway配置动态路由"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5、gateway配置动态路由"}},[t._v("#")]),t._v(" 5、GateWay配置动态路由")]),t._v(" "),a("p",[t._v("默认情况下Gateway会根据注册中心注册的服务列表，以注册中心上微服务名为路径创建"),a("strong",[t._v("动态路由进行转发，从而实现动态路由的功能")]),t._v("。")]),t._v(" "),a("div",{staticClass:"language-yml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("spring")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("application")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("name")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" cloud"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("gateway"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("gateway\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#############################新增网关配置###########################")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("cloud")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("gateway")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("discovery")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("locator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("enabled")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean important"}},[t._v("true")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 开启动态路由，以微服务名为路由")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("routes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("id")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" cloud"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("hystrix"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("provider"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("payment     "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 路由的ID，不要重复就行")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("uri")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" lb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("//cloud"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("hystrix"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("provider"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("payment       "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# lb表示gateway开启负载均衡")]),t._v("\n          "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("predicates")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Path=/"),a("span",{pre:!0,attrs:{class:"token important"}},[t._v("**")]),t._v("          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 断言，路径相匹配的进行路由")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" After=2017"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("01"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("20T17"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("42"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("47.789"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("07"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("00"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("America/Denver"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 表示这个时间之后可以访问")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Cookie=username"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("zhongnan\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" Header=X"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("Id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \\d+\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br")])]),a("h2",{attrs:{id:"_6、gateway常用的predicate"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6、gateway常用的predicate"}},[t._v("#")]),t._v(" 6、GateWay常用的Predicate")]),t._v(" "),a("p",[t._v("Spring Cloud Gateway将路由匹配作为Spring WebFlux HandlerMapping基础架构的一部分。")]),t._v(" "),a("p",[t._v("Spring Cloud Gateway包括许多内置的Route Predicate工厂。所有这些Predicate都与HTTP请求的不同属性匹配。多个RoutePredicate工厂可以进行组合。")]),t._v(" "),a("p",[t._v("Spring Cloud Gateway创建Route 对象时，使用RoutePredicateFactory 创建 Predicate对象，Predicate 对象可以赋值给Route。Spring Cloud Gateway包含许多内置的Route Predicate Factories。所有这些谓词都匹配HTTP请求的不同属性。多种谓词工厂可以组合，并通过逻辑and。")]),t._v(" "),a("ul",[a("li",[t._v("The After Route Predicate Factory\t在什么时间之后可以访问")]),t._v(" "),a("li",[t._v("The Before Route Predicate Factory   在什么时间之前可以访问")]),t._v(" "),a("li",[t._v("The Between Route Predicate Factory    在什么时间之间可以访问")]),t._v(" "),a("li",[t._v("The Cookie Route Predicate Factory    包含cookie才可以访问")]),t._v(" "),a("li",[t._v("The Header Route Predicate Factory    包含请求头才可以访问")]),t._v(" "),a("li",[t._v("The Host Route Predicate Factory    包含主机名才可以访问")]),t._v(" "),a("li",[t._v("The Method Route Predicate Factory    包含请求方法才可以访问")]),t._v(" "),a("li",[t._v("The Path Route Predicate Factory     包含路径才可以访问")]),t._v(" "),a("li",[t._v("The Query Route Predicate Factory    包含队列才可以访问")]),t._v(" "),a("li",[t._v("The RemoteAddr Route Predicate Factory    。。。")]),t._v(" "),a("li",[t._v("The weight Route Predicate Factory    。。。")])]),t._v(" "),a("div",{staticClass:"language-yml line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-yml"}},[a("code",[t._v("// 获取时间\nimport java.time.ZonedDateTime;\npublic class T2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n   public static void main(String"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args) "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n       ZonedDateTime zbj = ZonedDateTime.now(); // 默认时区\n       System.out.println(zbj);\n      //2021"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("02"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("22T15"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("51"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("37.485+08"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("00"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Asia/Shanghai"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[t._v("# 带指定请求头的参数的"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CURL")]),t._v("命令\ncurl http"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("localhost"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9527")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("payment"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("getServerPort "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("cookie "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"username=zhongnan"')]),t._v("\ncurl http"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("localhost"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9527")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("payment"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("getServerPort "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("H")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"X-Request-Id:123"')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h2",{attrs:{id:"_7、gateway的filter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_7、gateway的filter"}},[t._v("#")]),t._v(" 7、GateWay的Filter")]),t._v(" "),a("p",[t._v("路由过滤器可用于修改进入的HTTP请求和返回的HTTP响应，路由过滤器只能指定路由进行使用。Spring Cloud Gateway内置了多种路由过滤器，他们都由GatewayFilter的工厂类来产生。")]),t._v(" "),a("p",[t._v("Spring Cloud Gateway的Filter:")]),t._v(" "),a("p",[a("strong",[t._v("生命周期：")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("pre")])]),t._v(" "),a("li",[a("p",[t._v("post")])])]),t._v(" "),a("p",[a("strong",[t._v("种类（具体看官方文档）：")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("GatewayFilter - 有31种")])]),t._v(" "),a("li",[a("p",[t._v("GlobalFilter - 有10种")])])]),t._v(" "),a("p",[a("strong",[t._v("自定义全局GlobalFilter：")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("GlobalFilter")])]),t._v(" "),a("li",[a("p",[t._v("Ordered")])])]),t._v(" "),a("p",[a("strong",[t._v("能干什么：")])]),t._v(" "),a("ul",[a("li",[t._v("全局日志记录")]),t._v(" "),a("li",[t._v("统一网关鉴权")]),t._v(" "),a("li",[t._v("…")])]),t._v(" "),a("p",[t._v("主要还是自定义全局过滤器使用的比较多")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Component")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Slf4j")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyLogGateWayFilter")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GlobalFilter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Ordered")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Mono")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Void")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ServerWebExchange")]),t._v(" exchange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GatewayFilterChain")]),t._v(" chain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"***********come in MyLogGateWayFilter:  "')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" uname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" exchange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getQueryParams")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getFirst")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"uname"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("uname "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            log"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("info")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"*******用户名为null，非法用户，o(╥﹏╥)o"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            exchange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getResponse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setStatusCode")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpStatus")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("NOT_ACCEPTABLE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" exchange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getResponse")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setComplete")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" chain"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("filter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exchange"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getOrder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br")])]),a("h1",{attrs:{id:""}},[a("a",{staticClass:"header-anchor",attrs:{href:"#"}},[t._v("#")])])])}),[],!1,null,null,null);a.default=e.exports}}]);