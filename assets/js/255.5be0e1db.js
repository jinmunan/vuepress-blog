(window.webpackJsonp=window.webpackJsonp||[]).push([[255],{585:function(t,a,s){"use strict";s.r(a);var v=s(3),_=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"分布式基础概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分布式基础概念"}},[t._v("#")]),t._v(" 分布式基础概念")]),t._v(" "),a("h2",{attrs:{id:"微服务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#微服务"}},[t._v("#")]),t._v(" 微服务")]),t._v(" "),a("p",[t._v("微服务架构风格，就像是把一个单独的应用程序开发为一套小服务，每个小服务运行在自己的进程中，并使用轻量级机制通信，通常是 HTTP API。这些服务围绕业务能力来构建，并通过完全自动化部署机制来独立部署。这些服务使用不同的编程语言书写，以及不同数据存储技术，并保持最低限度的集中式管理。")]),t._v(" "),a("p",[a("strong",[t._v("简而言之：拒绝大型单体应用，基于业务边界进行服务微化拆分，各个服务独立部署运行。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.staticaly.com/gh/jinmunan/imgs@master/project/gulimall/image-20221117111628153.png",alt:"image-20221117111628153"}})]),t._v(" "),a("h2",{attrs:{id:"集群-分布式-节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#集群-分布式-节点"}},[t._v("#")]),t._v(" 集群&分布式&节点")]),t._v(" "),a("p",[a("strong",[t._v("分布式：将不同的业务分布在不同的地方。")])]),t._v(" "),a("p",[a("strong",[t._v("集群：是将几台服务器集中在一起，实现同一业务。")])]),t._v(" "),a("p",[a("strong",[t._v("节点：集群中的一个服务器。")])]),t._v(" "),a("p",[t._v("集群是个物理形态，分布式是个工作方式。")]),t._v(" "),a("p",[t._v("只要是一堆机器，就可以叫集群，他们是不是一起协作着干活，这个谁也不知道；")]),t._v(" "),a("blockquote",[a("p",[t._v("《分布式系统原理与范型》定义：“分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统”")])]),t._v(" "),a("p",[t._v("分布式系统（distributed system）是建立在网络之上的软件系统。")]),t._v(" "),a("p",[t._v("例如："),a("strong",[t._v("京东是一个分布式系统，众多业务运行在不同的机器")]),t._v("，所有业务构成一个大型的"),a("strong",[t._v("业务集群")]),t._v("。每一个小的业务，比如用户系统，访问压力大的时候一台服务器是不够的。我们就应该将用户系统部署到多个服务器，也就是"),a("strong",[t._v("每一个业务系统也可以做集群化")]),t._v("；")]),t._v(" "),a("p",[a("font",{staticStyle:{color:"blue"}},[t._v("分布式中的每一个节点，都可以做集群。 而集群并不一定就是分布式的。")])],1),t._v(" "),a("h2",{attrs:{id:"远程调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#远程调用"}},[t._v("#")]),t._v(" 远程调用")]),t._v(" "),a("p",[t._v("在分布式系统中，各个服务可能处于不同主机，但是服务之间不可避免的需要互相调用，我们称为远程调用。")]),t._v(" "),a("p",[t._v("SpringCloud 中使用 HTTP+JSON 的方式完成远程调用")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.staticaly.com/gh/jinmunan/imgs@master/project/gulimall/image-20221117113304374.png",alt:"image-20221117113304374"}})]),t._v(" "),a("h2",{attrs:{id:"负载均衡"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡"}},[t._v("#")]),t._v(" 负载均衡")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.staticaly.com/gh/jinmunan/imgs@master/project/gulimall/image-20221117113348013.png",alt:"image-20221117113348013"}})]),t._v(" "),a("p",[t._v("分布式系统中，A 服务需要调用 B 服务，B 服务在多台机器中都存在，A 调用任意一个服务器均可完成功能。")]),t._v(" "),a("p",[t._v("为了使每一个服务器都不要太忙或者太闲，我们可以负载均衡的调用每一个服务器，提升网站的健壮性。")]),t._v(" "),a("p",[a("strong",[t._v("常见的负载均衡算法：")])]),t._v(" "),a("p",[t._v("**轮询：**为第一个请求选择健康池中的第一个后端服务器，然后按顺序往后依次选择，直到最后一个，然后循环。")]),t._v(" "),a("p",[t._v("**最小连接：**优先选择连接数最少，也就是压力最小的后端服务器，在会话较长的情况下可以考虑采取这种方式。")]),t._v(" "),a("p",[t._v("**散列：**根据请求源的 IP 的散列（hash）来选择要转发的服务器。这种方式可以一定程度上保证特定用户能连接到相同的服务器。如果你的应用需要处理状态而要求用户能连接到和之前相同的服务器，可以考虑采取这种方式。")]),t._v(" "),a("h2",{attrs:{id:"服务注册-发现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务注册-发现"}},[t._v("#")]),t._v(" 服务注册&发现")]),t._v(" "),a("p",[t._v("A 服务调用 B 服务，A 服务并不知道 B 服务当前在哪几台服务器有，哪些正常的，哪些服务已经下线。解决这个问题可以引入注册中心；")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.staticaly.com/gh/jinmunan/imgs@master/project/gulimall/image-20221117113650401.png",alt:"image-20221117113650401"}})]),t._v(" "),a("p",[t._v("如果某些服务下线，我们其他人可以实时的感知到其他服务的状态，从而避免调用不可用的服务。")]),t._v(" "),a("h2",{attrs:{id:"配置中心"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#配置中心"}},[t._v("#")]),t._v(" 配置中心")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.staticaly.com/gh/jinmunan/imgs@master/project/gulimall/image-20221117113722487.png",alt:"image-20221117113722487"}})]),t._v(" "),a("p",[t._v("每一个服务最终都有大量的配置，并且每个服务都可能部署在多台机器上。我们经常需要变更配置，我们可以让每个服务在配置中心获取自己的配置。")]),t._v(" "),a("p",[t._v("配置中心用来集中管理微服务的配置信息")]),t._v(" "),a("h2",{attrs:{id:"服务熔断-服务降级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务熔断-服务降级"}},[t._v("#")]),t._v(" 服务熔断&服务降级")]),t._v(" "),a("p",[t._v("在微服务架构中，微服务之间通过网络进行通信，存在相互依赖，当其中一个服务不可用时，有可能会造成雪崩效应。要防止这样的情况，必须要有容错机制来保护服务。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.staticaly.com/gh/jinmunan/imgs@master/project/gulimall/image-20221117113820353.png",alt:"image-20221117113820353"}})]),t._v(" "),a("h3",{attrs:{id:"服务熔断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务熔断"}},[t._v("#")]),t._v(" 服务熔断")]),t._v(" "),a("p",[t._v("设置服务的超时，当被调用的服务经常失败到达某个阈值，我们可以开启断路保护机制，后来的请求不再去调用这个服务。本地直接返回默认的数据")]),t._v(" "),a("h3",{attrs:{id:"服务降级"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务降级"}},[t._v("#")]),t._v(" 服务降级")]),t._v(" "),a("p",[t._v("在运维期间，当系统处于高峰期，系统资源紧张，我们可以让非核心业务降级运行。降级：某些服务不处理，或者简单处理【抛异常、返回 NULL、调用 Mock 数据、调用 Fallback 处理逻辑】。")]),t._v(" "),a("h2",{attrs:{id:"api网关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#api网关"}},[t._v("#")]),t._v(" API网关")]),t._v(" "),a("p",[t._v("在微服务架构中，API Gateway 作为整体架构的重要组件，它"),a("strong",[t._v("抽象了微服务中都需要的公共功能")]),t._v("，同时提供了客户端"),a("strong",[t._v("负载均衡")]),t._v("，"),a("strong",[t._v("服务自动熔断")]),t._v("，"),a("strong",[t._v("灰度发布")]),t._v("，"),a("strong",[t._v("统一认证")]),t._v("，"),a("strong",[t._v("限流流控")]),t._v("，"),a("strong",[t._v("日志统计")]),t._v("等丰富的功能，帮助我们解决很多 API 管理难题。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://cdn.staticaly.com/gh/jinmunan/imgs@master/project/gulimall/image-20221117114051408.png",alt:"image-20221117114051408"}})])])}),[],!1,null,null,null);a.default=_.exports}}]);